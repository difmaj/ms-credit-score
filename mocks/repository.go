// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alisson-arus/projects/ms-credit-score/internal/usecase/usecase.go

// Package mock is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/difmaj/ms-credit-score/internal/domain"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/gomodule/redigo/redis"
	uuid "github.com/google/uuid"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetPrivilegesByUserID mocks base method.
func (m *MockIRepository) GetPrivilegesByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Privilege, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivilegesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Privilege)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivilegesByUserID indicates an expected call of GetPrivilegesByUserID.
func (mr *MockIRepositoryMockRecorder) GetPrivilegesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivilegesByUserID", reflect.TypeOf((*MockIRepository)(nil).GetPrivilegesByUserID), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockIRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIRepository)(nil).GetUserByEmail), ctx, email)
}

// MockIRedisClient is a mock of IRedisClient interface.
type MockIRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisClientMockRecorder
}

// MockIRedisClientMockRecorder is the mock recorder for MockIRedisClient.
type MockIRedisClientMockRecorder struct {
	mock *MockIRedisClient
}

// NewMockIRedisClient creates a new mock instance.
func NewMockIRedisClient(ctrl *gomock.Controller) *MockIRedisClient {
	mock := &MockIRedisClient{ctrl: ctrl}
	mock.recorder = &MockIRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisClient) EXPECT() *MockIRedisClientMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockIRedisClient) Client() redis.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(redis.Conn)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockIRedisClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockIRedisClient)(nil).Client))
}

// ConnCheck mocks base method.
func (m *MockIRedisClient) ConnCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnCheck indicates an expected call of ConnCheck.
func (mr *MockIRedisClientMockRecorder) ConnCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnCheck", reflect.TypeOf((*MockIRedisClient)(nil).ConnCheck))
}

// Get mocks base method.
func (m *MockIRedisClient) Get(key string, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIRedisClientMockRecorder) Get(key, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedisClient)(nil).Get), key, v)
}

// Set mocks base method.
func (m *MockIRedisClient) Set(key string, v any, exp int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, v, exp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIRedisClientMockRecorder) Set(key, v, exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRedisClient)(nil).Set), key, v, exp)
}
