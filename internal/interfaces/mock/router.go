// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alisson-arus/projects/ms-credit-score/internal/interfaces/router.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIRouter is a mock of IRouter interface.
type MockIRouter struct {
	ctrl     *gomock.Controller
	recorder *MockIRouterMockRecorder
}

// MockIRouterMockRecorder is the mock recorder for MockIRouter.
type MockIRouterMockRecorder struct {
	mock *MockIRouter
}

// NewMockIRouter creates a new mock instance.
func NewMockIRouter(ctrl *gomock.Controller) *MockIRouter {
	mock := &MockIRouter{ctrl: ctrl}
	mock.recorder = &MockIRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRouter) EXPECT() *MockIRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockIRouter) DELETE(path string, handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DELETE", varargs...)
}

// DELETE indicates an expected call of DELETE.
func (mr *MockIRouterMockRecorder) DELETE(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockIRouter)(nil).DELETE), varargs...)
}

// Engine mocks base method.
func (m *MockIRouter) Engine() *gin.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(*gin.Engine)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockIRouterMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockIRouter)(nil).Engine))
}

// GET mocks base method.
func (m *MockIRouter) GET(path string, handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockIRouterMockRecorder) GET(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockIRouter)(nil).GET), varargs...)
}

// Group mocks base method.
func (m *MockIRouter) Group(path string, handlers ...gin.HandlerFunc) *gin.RouterGroup {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Group", varargs...)
	ret0, _ := ret[0].(*gin.RouterGroup)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockIRouterMockRecorder) Group(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockIRouter)(nil).Group), varargs...)
}

// PATCH mocks base method.
func (m *MockIRouter) PATCH(path string, handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PATCH", varargs...)
}

// PATCH indicates an expected call of PATCH.
func (mr *MockIRouterMockRecorder) PATCH(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockIRouter)(nil).PATCH), varargs...)
}

// POST mocks base method.
func (m *MockIRouter) POST(path string, handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "POST", varargs...)
}

// POST indicates an expected call of POST.
func (mr *MockIRouterMockRecorder) POST(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockIRouter)(nil).POST), varargs...)
}

// PUT mocks base method.
func (m *MockIRouter) PUT(path string, handlers ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range handlers {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "PUT", varargs...)
}

// PUT indicates an expected call of PUT.
func (mr *MockIRouterMockRecorder) PUT(path interface{}, handlers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, handlers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockIRouter)(nil).PUT), varargs...)
}

// Run mocks base method.
func (m *MockIRouter) Run(port int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", port)
}

// Run indicates an expected call of Run.
func (mr *MockIRouterMockRecorder) Run(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIRouter)(nil).Run), port)
}

// ServeHTTP mocks base method.
func (m *MockIRouter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, req)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockIRouterMockRecorder) ServeHTTP(w, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockIRouter)(nil).ServeHTTP), w, req)
}

// Use mocks base method.
func (m *MockIRouter) Use(middleware ...gin.HandlerFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range middleware {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockIRouterMockRecorder) Use(middleware ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockIRouter)(nil).Use), middleware...)
}
