// Code generated by MockGen. DO NOT EDIT.
// Source: /home/alisson-arus/projects/ms-credit-score/internal/interfaces/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/difmaj/ms-credit-score/internal/domain"
	dto "github.com/difmaj/ms-credit-score/internal/dto"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockIRepository) CreateAsset(ctx context.Context, asset *domain.Asset) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", ctx, asset)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockIRepositoryMockRecorder) CreateAsset(ctx, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockIRepository)(nil).CreateAsset), ctx, asset)
}

// CreateDebt mocks base method.
func (m *MockIRepository) CreateDebt(ctx context.Context, debt *domain.Debt) (*domain.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDebt", ctx, debt)
	ret0, _ := ret[0].(*domain.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDebt indicates an expected call of CreateDebt.
func (mr *MockIRepositoryMockRecorder) CreateDebt(ctx, debt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDebt", reflect.TypeOf((*MockIRepository)(nil).CreateDebt), ctx, debt)
}

// DeleteAsset mocks base method.
func (m *MockIRepository) DeleteAsset(ctx context.Context, userID, assetID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", ctx, userID, assetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockIRepositoryMockRecorder) DeleteAsset(ctx, userID, assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockIRepository)(nil).DeleteAsset), ctx, userID, assetID)
}

// DeleteDebt mocks base method.
func (m *MockIRepository) DeleteDebt(ctx context.Context, userID, debtID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDebt", ctx, userID, debtID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDebt indicates an expected call of DeleteDebt.
func (mr *MockIRepositoryMockRecorder) DeleteDebt(ctx, userID, debtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDebt", reflect.TypeOf((*MockIRepository)(nil).DeleteDebt), ctx, userID, debtID)
}

// GetAssetByID mocks base method.
func (m *MockIRepository) GetAssetByID(ctx context.Context, userID, assetID uuid.UUID) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByID", ctx, userID, assetID)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByID indicates an expected call of GetAssetByID.
func (mr *MockIRepositoryMockRecorder) GetAssetByID(ctx, userID, assetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByID", reflect.TypeOf((*MockIRepository)(nil).GetAssetByID), ctx, userID, assetID)
}

// GetAssetsByUserID mocks base method.
func (m *MockIRepository) GetAssetsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetsByUserID indicates an expected call of GetAssetsByUserID.
func (mr *MockIRepositoryMockRecorder) GetAssetsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetsByUserID", reflect.TypeOf((*MockIRepository)(nil).GetAssetsByUserID), ctx, userID)
}

// GetDebtByID mocks base method.
func (m *MockIRepository) GetDebtByID(ctx context.Context, userID, debtID uuid.UUID) (*domain.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtByID", ctx, userID, debtID)
	ret0, _ := ret[0].(*domain.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtByID indicates an expected call of GetDebtByID.
func (mr *MockIRepositoryMockRecorder) GetDebtByID(ctx, userID, debtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtByID", reflect.TypeOf((*MockIRepository)(nil).GetDebtByID), ctx, userID, debtID)
}

// GetDebtsByUserID mocks base method.
func (m *MockIRepository) GetDebtsByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDebtsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDebtsByUserID indicates an expected call of GetDebtsByUserID.
func (mr *MockIRepositoryMockRecorder) GetDebtsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDebtsByUserID", reflect.TypeOf((*MockIRepository)(nil).GetDebtsByUserID), ctx, userID)
}

// GetPrivilegesByUserID mocks base method.
func (m *MockIRepository) GetPrivilegesByUserID(ctx context.Context, userID uuid.UUID) ([]*domain.Privilege, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivilegesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Privilege)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivilegesByUserID indicates an expected call of GetPrivilegesByUserID.
func (mr *MockIRepositoryMockRecorder) GetPrivilegesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivilegesByUserID", reflect.TypeOf((*MockIRepository)(nil).GetPrivilegesByUserID), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockIRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIRepository)(nil).GetUserByEmail), ctx, email)
}

// UpdateAsset mocks base method.
func (m *MockIRepository) UpdateAsset(ctx context.Context, userID uuid.UUID, assetUpdate *dto.UpdateAsset) (*domain.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", ctx, userID, assetUpdate)
	ret0, _ := ret[0].(*domain.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockIRepositoryMockRecorder) UpdateAsset(ctx, userID, assetUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockIRepository)(nil).UpdateAsset), ctx, userID, assetUpdate)
}

// UpdateDebt mocks base method.
func (m *MockIRepository) UpdateDebt(ctx context.Context, userID uuid.UUID, debtUpdate *dto.UpdateDebt) (*domain.Debt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDebt", ctx, userID, debtUpdate)
	ret0, _ := ret[0].(*domain.Debt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDebt indicates an expected call of UpdateDebt.
func (mr *MockIRepositoryMockRecorder) UpdateDebt(ctx, userID, debtUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDebt", reflect.TypeOf((*MockIRepository)(nil).UpdateDebt), ctx, userID, debtUpdate)
}
